{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andonija\\\\apps\\\\git\\\\EcoLife\\\\ecolife\\\\src\\\\Leaderboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { db } from './firebaseConfig';\nimport { collection, query, orderBy, getDocs, doc, getDoc } from 'firebase/firestore';\nimport './Leaderboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Leaderboard = () => {\n  _s();\n  const [leaderboard, setLeaderboard] = useState([]);\n  useEffect(() => {\n    const fetchLeaderboard = async () => {\n      const leaderboardQuery = query(collection(db, 'quizResults'), orderBy('date', 'desc') // Order by date to ensure we get the latest results first\n      );\n      const querySnapshot = await getDocs(leaderboardQuery);\n      const leaderboardData = querySnapshot.docs.map(doc => doc.data());\n\n      // Filter out to get only the latest score for each user\n      const latestScores = {};\n      leaderboardData.forEach(result => {\n        if (!latestScores[result.userId] || latestScores[result.userId].date < result.date) {\n          latestScores[result.userId] = result;\n        }\n      });\n      const latestScoresArray = Object.values(latestScores).sort((a, b) => b.score - a.score).slice(0, 3);\n\n      // Fetch user names and profile pictures for the top scores\n      const leaderboardWithNamesAndPictures = await Promise.all(latestScoresArray.map(async result => {\n        try {\n          const userDocRef = doc(db, 'profiles', result.userId);\n          const userDoc = await getDoc(userDocRef);\n          if (userDoc.exists()) {\n            result.userName = userDoc.data().name;\n            result.userPicture = userDoc.data().picture;\n          } else {\n            result.userName = result.userId; // Fallback to userId if name is not found\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n          result.userName = result.userId; // Fallback to userId in case of an error\n        }\n        return result;\n      }));\n      setLeaderboard(leaderboardWithNamesAndPictures);\n    };\n    fetchLeaderboard();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"leaderboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Leaderboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"podium\",\n      children: leaderboard.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `podium-item position-${index + 1}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"podium-rank\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), result.userPicture && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: result.userPicture,\n          alt: result.userName,\n          className: \"podium-picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"podium-user\",\n          children: result.userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"podium-score\",\n          children: [\"Score: \", result.score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Leaderboard, \"5nWgb4U8OWWBfdWys4hajXcQbUU=\");\n_c = Leaderboard;\nexport default Leaderboard;\nvar _c;\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"names":["React","useEffect","useState","db","collection","query","orderBy","getDocs","doc","getDoc","jsxDEV","_jsxDEV","Leaderboard","_s","leaderboard","setLeaderboard","fetchLeaderboard","leaderboardQuery","querySnapshot","leaderboardData","docs","map","data","latestScores","forEach","result","userId","date","latestScoresArray","Object","values","sort","a","b","score","slice","leaderboardWithNamesAndPictures","Promise","all","userDocRef","userDoc","exists","userName","name","userPicture","picture","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Andonija/apps/git/EcoLife/ecolife/src/Leaderboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { db } from './firebaseConfig';\r\nimport { collection, query, orderBy, getDocs, Timestamp, doc, getDoc } from 'firebase/firestore';\r\nimport './Leaderboard.css';\r\n\r\ninterface QuizResult {\r\n  date: Timestamp;\r\n  userId: string;\r\n  score: number;\r\n  userName?: string; // Optional userName field\r\n  userPicture?: string; // Optional userPicture field\r\n}\r\n\r\nconst Leaderboard: React.FC = () => {\r\n  const [leaderboard, setLeaderboard] = useState<QuizResult[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchLeaderboard = async () => {\r\n      const leaderboardQuery = query(\r\n        collection(db, 'quizResults'),\r\n        orderBy('date', 'desc') // Order by date to ensure we get the latest results first\r\n      );\r\n      const querySnapshot = await getDocs(leaderboardQuery);\r\n      const leaderboardData = querySnapshot.docs.map(doc => doc.data() as QuizResult);\r\n\r\n      // Filter out to get only the latest score for each user\r\n      const latestScores: { [userId: string]: QuizResult } = {};\r\n      leaderboardData.forEach(result => {\r\n        if (!latestScores[result.userId] || latestScores[result.userId].date < result.date) {\r\n          latestScores[result.userId] = result;\r\n        }\r\n      });\r\n\r\n      const latestScoresArray = Object.values(latestScores).sort((a, b) => b.score - a.score).slice(0, 3);\r\n\r\n      // Fetch user names and profile pictures for the top scores\r\n      const leaderboardWithNamesAndPictures = await Promise.all(latestScoresArray.map(async (result) => {\r\n        try {\r\n          const userDocRef = doc(db, 'profiles', result.userId);\r\n          const userDoc = await getDoc(userDocRef);\r\n          if (userDoc.exists()) {\r\n            result.userName = userDoc.data().name;\r\n            result.userPicture = userDoc.data().picture;\r\n          } else {\r\n            result.userName = result.userId; // Fallback to userId if name is not found\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching user profile:', error);\r\n          result.userName = result.userId; // Fallback to userId in case of an error\r\n        }\r\n        return result;\r\n      }));\r\n\r\n      setLeaderboard(leaderboardWithNamesAndPictures);\r\n    };\r\n\r\n    fetchLeaderboard();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"leaderboard\">\r\n      <h2>Leaderboard</h2>\r\n      <div className=\"podium\">\r\n        {leaderboard.map((result, index) => (\r\n          <div key={index} className={`podium-item position-${index + 1}`}>\r\n            <div className=\"podium-rank\">{index + 1}</div>\r\n            {result.userPicture && <img src={result.userPicture} alt={result.userName} className=\"podium-picture\" />}\r\n            <div className=\"podium-user\">{result.userName}</div>\r\n            <div className=\"podium-score\">Score: {result.score}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,SAASC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAaC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAChG,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU3B,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAe,EAAE,CAAC;EAEhED,SAAS,CAAC,MAAM;IACd,MAAMe,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAMC,gBAAgB,GAAGZ,KAAK,CAC5BD,UAAU,CAACD,EAAE,EAAE,aAAa,CAAC,EAC7BG,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;MAC1B,CAAC;MACD,MAAMY,aAAa,GAAG,MAAMX,OAAO,CAACU,gBAAgB,CAAC;MACrD,MAAME,eAAe,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAACb,GAAG,IAAIA,GAAG,CAACc,IAAI,CAAC,CAAe,CAAC;;MAE/E;MACA,MAAMC,YAA8C,GAAG,CAAC,CAAC;MACzDJ,eAAe,CAACK,OAAO,CAACC,MAAM,IAAI;QAChC,IAAI,CAACF,YAAY,CAACE,MAAM,CAACC,MAAM,CAAC,IAAIH,YAAY,CAACE,MAAM,CAACC,MAAM,CAAC,CAACC,IAAI,GAAGF,MAAM,CAACE,IAAI,EAAE;UAClFJ,YAAY,CAACE,MAAM,CAACC,MAAM,CAAC,GAAGD,MAAM;QACtC;MACF,CAAC,CAAC;MAEF,MAAMG,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAACP,YAAY,CAAC,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;MAEnG;MACA,MAAMC,+BAA+B,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACV,iBAAiB,CAACP,GAAG,CAAC,MAAOI,MAAM,IAAK;QAChG,IAAI;UACF,MAAMc,UAAU,GAAG/B,GAAG,CAACL,EAAE,EAAE,UAAU,EAAEsB,MAAM,CAACC,MAAM,CAAC;UACrD,MAAMc,OAAO,GAAG,MAAM/B,MAAM,CAAC8B,UAAU,CAAC;UACxC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;YACpBhB,MAAM,CAACiB,QAAQ,GAAGF,OAAO,CAAClB,IAAI,CAAC,CAAC,CAACqB,IAAI;YACrClB,MAAM,CAACmB,WAAW,GAAGJ,OAAO,CAAClB,IAAI,CAAC,CAAC,CAACuB,OAAO;UAC7C,CAAC,MAAM;YACLpB,MAAM,CAACiB,QAAQ,GAAGjB,MAAM,CAACC,MAAM,CAAC,CAAC;UACnC;QACF,CAAC,CAAC,OAAOoB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACpDrB,MAAM,CAACiB,QAAQ,GAAGjB,MAAM,CAACC,MAAM,CAAC,CAAC;QACnC;QACA,OAAOD,MAAM;MACf,CAAC,CAAC,CAAC;MAEHV,cAAc,CAACqB,+BAA+B,CAAC;IACjD,CAAC;IAEDpB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKqC,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BtC,OAAA;MAAAsC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB1C,OAAA;MAAKqC,SAAS,EAAC,QAAQ;MAAAC,QAAA,EACpBnC,WAAW,CAACO,GAAG,CAAC,CAACI,MAAM,EAAE6B,KAAK,kBAC7B3C,OAAA;QAAiBqC,SAAS,EAAE,wBAAwBM,KAAK,GAAG,CAAC,EAAG;QAAAL,QAAA,gBAC9DtC,OAAA;UAAKqC,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAEK,KAAK,GAAG;QAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAC7C5B,MAAM,CAACmB,WAAW,iBAAIjC,OAAA;UAAK4C,GAAG,EAAE9B,MAAM,CAACmB,WAAY;UAACY,GAAG,EAAE/B,MAAM,CAACiB,QAAS;UAACM,SAAS,EAAC;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxG1C,OAAA;UAAKqC,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAExB,MAAM,CAACiB;QAAQ;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACpD1C,OAAA;UAAKqC,SAAS,EAAC,cAAc;UAAAC,QAAA,GAAC,SAAO,EAACxB,MAAM,CAACS,KAAK;QAAA;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAJjDC,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxC,EAAA,CA7DID,WAAqB;AAAA6C,EAAA,GAArB7C,WAAqB;AA+D3B,eAAeA,WAAW;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}